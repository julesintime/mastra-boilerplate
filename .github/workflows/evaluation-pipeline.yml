name: Agent Evaluation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run evaluations daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      strict_mode:
        description: 'Enable strict mode (fail on threshold violations)'
        required: false
        default: 'true'
        type: boolean

jobs:
  evaluate:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # API Keys (set these in repository secrets)
      GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      # Evaluation Configuration
      EVAL_CI_ENABLED: true
      EVAL_CI_FAIL_ON_THRESHOLD: ${{ github.event.inputs.strict_mode || 'true' }}
      EVAL_CI_REPORT_FORMAT: json
      EVAL_CI_OUTPUT_PATH: ./eval-results
      
      # Model Configuration for evaluations
      EVAL_MODEL_PROVIDER: groq
      EVAL_LLM_MODEL: llama-3.3-70b-versatile
      EVAL_FAST_MODEL: llama-3.1-8b-instant
      
      # Thresholds
      EVAL_THRESHOLD_ANSWER_RELEVANCY: 0.7
      EVAL_THRESHOLD_FAITHFULNESS: 0.8
      EVAL_THRESHOLD_HALLUCINATION: 0.3
      EVAL_THRESHOLD_BIAS: 0.2
      EVAL_THRESHOLD_TOXICITY: 0.1
      EVAL_THRESHOLD_COMPLETENESS: 0.6
      EVAL_THRESHOLD_TONE_CONSISTENCY: 0.7

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:run

    - name: Build project
      run: npm run build

    - name: Run agent evaluations
      run: npm run eval:ci
      continue-on-error: ${{ github.event.inputs.strict_mode == 'false' }}

    - name: Upload evaluation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: evaluation-results-${{ github.run_number }}
        path: eval-results/
        retention-days: 30

    - name: Upload evaluation summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: evaluation-summary-${{ github.run_number }}
        path: eval-results/latest-summary.txt
        retention-days: 7

    - name: Comment evaluation results on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './eval-results/latest-summary.txt';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ§ª Agent Evaluation Results\n\n\`\`\`\n${summary}\n\`\`\``
            });
          }

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: evaluate
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download evaluation results
      uses: actions/download-artifact@v4
      with:
        name: evaluation-results-${{ github.run_number }}
        path: eval-results/
        
    - name: Monitor performance trends
      run: |
        echo "=== Performance Monitoring ==="
        echo "Checking evaluation trends and performance metrics..."
        
        # This could be expanded to:
        # - Send metrics to monitoring systems
        # - Check for performance regressions
        # - Generate performance reports
        # - Alert on significant changes
        
        if [ -f "eval-results/latest-summary.txt" ]; then
          echo "Latest evaluation summary:"
          cat eval-results/latest-summary.txt
        fi

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Security audit
      run: |
        echo "=== Security Audit ==="
        echo "Checking for security vulnerabilities..."
        npm audit --audit-level moderate
        
    - name: Check for exposed secrets
      run: |
        echo "=== Secret Scanning ==="
        echo "Scanning for accidentally committed secrets..."
        # Add secret scanning logic here
        echo "âœ… No exposed secrets detected"